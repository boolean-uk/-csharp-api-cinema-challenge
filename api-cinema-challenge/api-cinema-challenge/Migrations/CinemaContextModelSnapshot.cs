// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    partial class CinemaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            CreatedAt = new DateTime(2024, 1, 14, 23, 0, 0, 0, DateTimeKind.Utc),
                            Email = "audrey.hepburn@example.com",
                            Name = "Audrey Hepburn",
                            Phone = "+47 12345678",
                            UpdatedAt = new DateTime(2024, 9, 11, 22, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            CustomerId = 2,
                            CreatedAt = new DateTime(2024, 2, 19, 23, 0, 0, 0, DateTimeKind.Utc),
                            Email = "donald.trump@example.com",
                            Name = "Donald Trump",
                            Phone = "+47 23456789",
                            UpdatedAt = new DateTime(2024, 9, 11, 22, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            CustomerId = 3,
                            CreatedAt = new DateTime(2024, 3, 24, 23, 0, 0, 0, DateTimeKind.Utc),
                            Email = "elvis.presley@example.com",
                            Name = "Elvis Presley",
                            Phone = "+47 34567890",
                            UpdatedAt = new DateTime(2024, 9, 11, 22, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            CustomerId = 4,
                            CreatedAt = new DateTime(2024, 4, 9, 22, 0, 0, 0, DateTimeKind.Utc),
                            Email = "barack.obama@example.com",
                            Name = "Barack Obama",
                            Phone = "+47 45678901",
                            UpdatedAt = new DateTime(2024, 9, 11, 22, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            CustomerId = 5,
                            CreatedAt = new DateTime(2024, 5, 4, 22, 0, 0, 0, DateTimeKind.Utc),
                            Email = "oprah.winfrey@example.com",
                            Name = "Oprah Winfrey",
                            Phone = "+47 56789012",
                            UpdatedAt = new DateTime(2024, 9, 11, 22, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            CustomerId = 6,
                            CreatedAt = new DateTime(2024, 6, 14, 22, 0, 0, 0, DateTimeKind.Utc),
                            Email = "jimi.hendrix@example.com",
                            Name = "Jimi Hendrix",
                            Phone = "+47 67890123",
                            UpdatedAt = new DateTime(2024, 9, 11, 22, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            CustomerId = 7,
                            CreatedAt = new DateTime(2024, 7, 19, 22, 0, 0, 0, DateTimeKind.Utc),
                            Email = "mick.jagger@example.com",
                            Name = "Mick Jagger",
                            Phone = "+47 78901234",
                            UpdatedAt = new DateTime(2024, 9, 11, 22, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            CustomerId = 8,
                            CreatedAt = new DateTime(2024, 8, 24, 22, 0, 0, 0, DateTimeKind.Utc),
                            Email = "kate.winslet@example.com",
                            Name = "Kate Winslet",
                            Phone = "+47 89012345",
                            UpdatedAt = new DateTime(2024, 9, 11, 22, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            CustomerId = 9,
                            CreatedAt = new DateTime(2024, 9, 4, 22, 0, 0, 0, DateTimeKind.Utc),
                            Email = "charles.windsor@example.com",
                            Name = "Charles Windsor",
                            Phone = "+47 90123456",
                            UpdatedAt = new DateTime(2024, 9, 11, 22, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            CustomerId = 10,
                            CreatedAt = new DateTime(2024, 9, 9, 22, 0, 0, 0, DateTimeKind.Utc),
                            Email = "kate.middleton@example.com",
                            Name = "Kate Middleton",
                            Phone = "+47 01234567",
                            UpdatedAt = new DateTime(2024, 9, 11, 22, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RuntimeMins")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Property<int>("ScreeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ScreeningId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ScreeningId");

                    b.ToTable("Screenings");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("NumSeats")
                        .HasColumnType("integer");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
