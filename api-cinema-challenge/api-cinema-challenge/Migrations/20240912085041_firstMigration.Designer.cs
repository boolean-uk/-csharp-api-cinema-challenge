// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    [Migration("20240912085041_firstMigration")]
    partial class firstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.ToTable("customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4889),
                            Email = "Ps@snailmail.com",
                            Name = "Princess Squarepants",
                            Phone = "+46304255506",
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4889)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4899),
                            Email = "Yo@snailmail.com",
                            Name = "Yoshi Mario",
                            Phone = "+46742181602",
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4899)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4904),
                            Email = "Mr@snailmail.com",
                            Name = "Mario Star",
                            Phone = "+46322218750",
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4904)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4907),
                            Email = "Sy@snailmail.com",
                            Name = "Spongebob Daisy",
                            Phone = "+46188924328",
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4907)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4912),
                            Email = "Mh@snailmail.com",
                            Name = "Mario Peach",
                            Phone = "+46961720906",
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4912)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4918),
                            Email = "Sa@snailmail.com",
                            Name = "Spongebob the Echidna",
                            Phone = "+46584419699",
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4918)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4923),
                            Email = "Sa@snailmail.com",
                            Name = "Spongebob the Echidna",
                            Phone = "+46277861519",
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4923)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4927),
                            Email = "Dr@snailmail.com",
                            Name = "Donkey Star",
                            Phone = "+46493408740",
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4927)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4931),
                            Email = "Sr@snailmail.com",
                            Name = "Sonic the Dinosaur",
                            Phone = "+46825755504",
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4931)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4936),
                            Email = "Sr@snailmail.com",
                            Name = "Sandy Star",
                            Phone = "+46770207150",
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4936)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rating");

                    b.Property<int>("RuntimeMins")
                        .HasColumnType("integer")
                        .HasColumnName("runtimeMins");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.ToTable("movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4943),
                            Description = "The universal bestselling love story, now adapted into a movie",
                            Rating = "PG-3",
                            RuntimeMins = 69,
                            Title = "Saving the Trumpet",
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4943)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4946),
                            Description = "A sad story filled with drama and anticipation",
                            Rating = "PG-18",
                            RuntimeMins = 154,
                            Title = "Beauty & the Trumpet",
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4946)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4948),
                            Description = "This movie will rock your socks with comedy beyond your wildest expectations!",
                            Rating = "PG-3",
                            RuntimeMins = 209,
                            Title = "Elf on the Boys",
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4948)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4949),
                            Description = "There has been a murder in town, can they solve the mystery before it is too late?",
                            Rating = "PG-3",
                            RuntimeMins = 158,
                            Title = "Crazy Trumpet",
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4949)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4951),
                            Description = "Got a date around the corner? Grab your significant other and enjoy a sensational and emotional story unfold like never before",
                            Rating = "PG-3",
                            RuntimeMins = 113,
                            Title = "Elf on the Bees",
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4951)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4953),
                            Description = "This movie will rock your socks with comedy beyond your wildest expectations!",
                            Rating = "PG-13",
                            RuntimeMins = 117,
                            Title = "Lady & the Beast",
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4953)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4955),
                            Description = "A sad story filled with drama and anticipation",
                            Rating = "PG-13",
                            RuntimeMins = 135,
                            Title = "The Shelf",
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4955)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4956),
                            Description = "This movie will rock your socks with comedy beyond your wildest expectations!",
                            Rating = "PG-7",
                            RuntimeMins = 149,
                            Title = "Saving the Frog",
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4956)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4957),
                            Description = "The universal bestselling love story, now adapted into a movie",
                            Rating = "PG-18",
                            RuntimeMins = 61,
                            Title = "Beauty & the Shelf",
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4957)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4959),
                            Description = "This movie will rock your socks with comedy beyond your wildest expectations!",
                            Rating = "PG-18",
                            RuntimeMins = 172,
                            Title = "Dystopian Boys",
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(4959)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movieId");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("integer")
                        .HasColumnName("screenNumber");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startsAt");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("screenings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 48,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5030),
                            MovieId = 1,
                            ScreenNumber = 9,
                            StartsAt = new DateTime(2024, 9, 15, 3, 45, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5030)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 46,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5079),
                            MovieId = 3,
                            ScreenNumber = 8,
                            StartsAt = new DateTime(2024, 9, 15, 1, 15, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5079)
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 48,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5083),
                            MovieId = 3,
                            ScreenNumber = 9,
                            StartsAt = new DateTime(2024, 9, 12, 15, 30, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5083)
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 48,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5087),
                            MovieId = 10,
                            ScreenNumber = 9,
                            StartsAt = new DateTime(2024, 9, 12, 22, 15, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5087)
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 34,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5091),
                            MovieId = 7,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 9, 14, 7, 45, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5091)
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 34,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5095),
                            MovieId = 8,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 9, 13, 22, 30, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5095)
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 50,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5099),
                            MovieId = 5,
                            ScreenNumber = 10,
                            StartsAt = new DateTime(2024, 9, 14, 1, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5099)
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 34,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5102),
                            MovieId = 7,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 9, 12, 19, 30, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5102)
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 42,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5106),
                            MovieId = 1,
                            ScreenNumber = 6,
                            StartsAt = new DateTime(2024, 9, 14, 4, 30, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5106)
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 46,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5110),
                            MovieId = 2,
                            ScreenNumber = 8,
                            StartsAt = new DateTime(2024, 9, 13, 0, 45, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5110)
                        },
                        new
                        {
                            Id = 11,
                            Capacity = 44,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5114),
                            MovieId = 9,
                            ScreenNumber = 7,
                            StartsAt = new DateTime(2024, 9, 13, 16, 30, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5114)
                        },
                        new
                        {
                            Id = 12,
                            Capacity = 34,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5117),
                            MovieId = 7,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 9, 13, 9, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5117)
                        },
                        new
                        {
                            Id = 13,
                            Capacity = 36,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5121),
                            MovieId = 9,
                            ScreenNumber = 3,
                            StartsAt = new DateTime(2024, 9, 13, 19, 30, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5121)
                        },
                        new
                        {
                            Id = 14,
                            Capacity = 34,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5124),
                            MovieId = 9,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 9, 12, 23, 45, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5124)
                        },
                        new
                        {
                            Id = 15,
                            Capacity = 32,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5127),
                            MovieId = 6,
                            ScreenNumber = 1,
                            StartsAt = new DateTime(2024, 9, 15, 8, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5127)
                        },
                        new
                        {
                            Id = 16,
                            Capacity = 36,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5130),
                            MovieId = 5,
                            ScreenNumber = 3,
                            StartsAt = new DateTime(2024, 9, 14, 3, 30, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5130)
                        },
                        new
                        {
                            Id = 17,
                            Capacity = 48,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5133),
                            MovieId = 10,
                            ScreenNumber = 9,
                            StartsAt = new DateTime(2024, 9, 14, 3, 15, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5133)
                        },
                        new
                        {
                            Id = 18,
                            Capacity = 44,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5137),
                            MovieId = 9,
                            ScreenNumber = 7,
                            StartsAt = new DateTime(2024, 9, 13, 0, 15, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5137)
                        },
                        new
                        {
                            Id = 19,
                            Capacity = 42,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5141),
                            MovieId = 7,
                            ScreenNumber = 6,
                            StartsAt = new DateTime(2024, 9, 13, 7, 45, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5141)
                        },
                        new
                        {
                            Id = 20,
                            Capacity = 34,
                            CreatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5144),
                            MovieId = 2,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 9, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 12, 8, 50, 41, 673, DateTimeKind.Utc).AddTicks(5144)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Movie", "Movie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Navigation("Screenings");
                });
#pragma warning restore 612, 618
        }
    }
}
