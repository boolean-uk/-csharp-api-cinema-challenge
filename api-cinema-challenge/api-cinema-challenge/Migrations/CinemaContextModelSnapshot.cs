// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    partial class CinemaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("customer_created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("customer_updated_date");

                    b.HasKey("Id");

                    b.ToTable("customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4261),
                            Email = "ola@nordmann.no",
                            Name = "Ola Nordmann",
                            Phone = "+123456789",
                            UpdatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4264)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4268),
                            Email = "kari@nordmann.no",
                            Name = "Kari Nordmann",
                            Phone = "+987654321",
                            UpdatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4269)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("movie_created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("movie_description");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("movie_rating");

                    b.Property<int>("RuntimeMins")
                        .HasColumnType("integer")
                        .HasColumnName("movie_runtime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("movie_title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("movie_updated_date");

                    b.HasKey("Id");

                    b.ToTable("movie");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4326),
                            Description = "You won't believe what happens",
                            Rating = "PG-13",
                            RuntimeMins = 120,
                            Title = "Titanic",
                            UpdatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4327)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4330),
                            Description = "With a pencil",
                            Rating = "M-17",
                            RuntimeMins = 90,
                            Title = "John Wick",
                            UpdatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4331)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4333),
                            Description = "He's beggining to believe",
                            Rating = "PG-13",
                            RuntimeMins = 120,
                            Title = "Matrix",
                            UpdatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4334)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("screening_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("screening_capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("screening_created_date");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("integer")
                        .HasColumnName("screening_screennumber");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("screening_start_date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("screening_updated_date");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("screening");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 50,
                            CreatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4362),
                            MovieId = 1,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4361),
                            UpdatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4363)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 25,
                            CreatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4368),
                            MovieId = 2,
                            ScreenNumber = 4,
                            StartsAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4368),
                            UpdatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4369)
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 50,
                            CreatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4372),
                            MovieId = 3,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4371),
                            UpdatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4373)
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 25,
                            CreatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4376),
                            MovieId = 1,
                            ScreenNumber = 4,
                            StartsAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4375),
                            UpdatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4377)
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 50,
                            CreatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4380),
                            MovieId = 2,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4379),
                            UpdatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4381)
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 25,
                            CreatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4383),
                            MovieId = 3,
                            ScreenNumber = 4,
                            StartsAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4382),
                            UpdatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4384)
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 50,
                            CreatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4388),
                            MovieId = 1,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4388),
                            UpdatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4389)
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 25,
                            CreatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4393),
                            MovieId = 2,
                            ScreenNumber = 4,
                            StartsAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4392),
                            UpdatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4393)
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 50,
                            CreatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4396),
                            MovieId = 3,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4395),
                            UpdatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4397)
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 25,
                            CreatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4399),
                            MovieId = 1,
                            ScreenNumber = 4,
                            StartsAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4398),
                            UpdatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4400)
                        },
                        new
                        {
                            Id = 11,
                            Capacity = 50,
                            CreatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4402),
                            MovieId = 2,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4402),
                            UpdatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4403)
                        },
                        new
                        {
                            Id = 12,
                            Capacity = 25,
                            CreatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4405),
                            MovieId = 3,
                            ScreenNumber = 4,
                            StartsAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4405),
                            UpdatedAt = new DateTime(2024, 2, 8, 12, 8, 30, 189, DateTimeKind.Utc).AddTicks(4406)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Movie", "Movie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Navigation("Screenings");
                });
#pragma warning restore 612, 618
        }
    }
}
