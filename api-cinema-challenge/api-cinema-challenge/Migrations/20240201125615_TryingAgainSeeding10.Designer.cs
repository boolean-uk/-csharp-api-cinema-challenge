// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    [Migration("20240201125615_TryingAgainSeeding10")]
    partial class TryingAgainSeeding10
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1603),
                            Email = "DonaldDuck@gmail.com",
                            Name = "Donald Duck",
                            Phone = "(496) 262-1642",
                            UpdatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1656)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1683),
                            Email = "ElvisPresley@gmail.com",
                            Name = "Elvis Presley",
                            Phone = "(200) 933-1067",
                            UpdatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1692)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1701),
                            Email = "Barack.Obama@gmail.com",
                            Name = "Barack Obama",
                            Phone = "(853) 847-7386",
                            UpdatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1710)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1732),
                            Email = "OprahWinfrey@gmail.com",
                            Name = "Oprah Winfrey",
                            Phone = "(609) 360-3328",
                            UpdatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1741)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rating");

                    b.Property<int>("RuntimeMins")
                        .HasColumnType("integer")
                        .HasColumnName("runtime_mins");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 60, DateTimeKind.Utc).AddTicks(9044),
                            Description = "It was ok, critics are indifferent.",
                            Rating = "R",
                            RuntimeMins = 178,
                            Title = "Amelie",
                            UpdatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 60, DateTimeKind.Utc).AddTicks(9261)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1509),
                            Description = "The greatest movie ever made.",
                            Rating = "R",
                            RuntimeMins = 135,
                            Title = "One Flew Over The Cuckoo's Nest",
                            UpdatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1529)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1540),
                            Description = "This is a cult classic.",
                            Rating = "R",
                            RuntimeMins = 145,
                            Title = "Alien - Prometheus",
                            UpdatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1547)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1557),
                            Description = "The greatest movie ever made.",
                            Rating = "NC-17",
                            RuntimeMins = 147,
                            Title = "Fantastic Mr. Fox",
                            UpdatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1565)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("integer")
                        .HasColumnName("screen_number");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("screenings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 53,
                            CreatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1772),
                            MovieId = 1,
                            ScreenNumber = 26,
                            StartsAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1757),
                            UpdatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1814)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 34,
                            CreatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1865),
                            MovieId = 1,
                            ScreenNumber = 22,
                            StartsAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1853),
                            UpdatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1872)
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 44,
                            CreatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1891),
                            MovieId = 2,
                            ScreenNumber = 32,
                            StartsAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1882),
                            UpdatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1900)
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 60,
                            CreatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1917),
                            MovieId = 1,
                            ScreenNumber = 43,
                            StartsAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1909),
                            UpdatedAt = new DateTime(2024, 2, 1, 12, 56, 13, 61, DateTimeKind.Utc).AddTicks(1925)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Movie", "Movie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Navigation("Screenings");
                });
#pragma warning restore 612, 618
        }
    }
}
