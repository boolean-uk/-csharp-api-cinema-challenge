// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    partial class CinemaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challange.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Phone")
                        .HasColumnType("integer")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3647),
                            Email = "audrey@gov.ru",
                            Name = "Audrey",
                            Phone = 555123456,
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3651)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3654),
                            Email = "donald@tesla.com",
                            Name = "Donald",
                            Phone = 555123456,
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3654)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3656),
                            Email = "elvis@gov.nl",
                            Name = "Elvis",
                            Phone = 555123456,
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3657)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3658),
                            Email = "barack@tesla.com",
                            Name = "Barack",
                            Phone = 555123456,
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3658)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3659),
                            Email = "oprah@gov.us",
                            Name = "Oprah",
                            Phone = 555123456,
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3660)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3662),
                            Email = "jimi@bbc.co.uk",
                            Name = "Jimi",
                            Phone = 555123456,
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3662)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3664),
                            Email = "mick@nasa.org.us",
                            Name = "Mick",
                            Phone = 555123456,
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3664)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3665),
                            Email = "kate@gov.us",
                            Name = "Kate",
                            Phone = 555123456,
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3670)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3671),
                            Email = "charles@gov.ru",
                            Name = "Charles",
                            Phone = 555123456,
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3672)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3674),
                            Email = "kate@theworld.ca",
                            Name = "Kate",
                            Phone = 555123456,
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3674)
                        });
                });

            modelBuilder.Entity("api_cinema_challange.Models.CustomerTicket", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer")
                        .HasColumnName("ticket_id");

                    b.HasKey("CustomerId", "TicketId");

                    b.HasIndex("TicketId");

                    b.ToTable("customer_ticket");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            TicketId = 1
                        },
                        new
                        {
                            CustomerId = 2,
                            TicketId = 2
                        },
                        new
                        {
                            CustomerId = 3,
                            TicketId = 3
                        },
                        new
                        {
                            CustomerId = 4,
                            TicketId = 4
                        },
                        new
                        {
                            CustomerId = 5,
                            TicketId = 5
                        },
                        new
                        {
                            CustomerId = 6,
                            TicketId = 6
                        },
                        new
                        {
                            CustomerId = 7,
                            TicketId = 7
                        },
                        new
                        {
                            CustomerId = 8,
                            TicketId = 8
                        },
                        new
                        {
                            CustomerId = 9,
                            TicketId = 9
                        },
                        new
                        {
                            CustomerId = 10,
                            TicketId = 10
                        });
                });

            modelBuilder.Entity("api_cinema_challange.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rating");

                    b.Property<int>("RuntimeMins")
                        .HasColumnType("integer")
                        .HasColumnName("runtime_mins");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("movie");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3678),
                            Description = "Oprah",
                            Rating = "PG-99",
                            RuntimeMins = 120,
                            Title = "Titanic",
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3679)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3681),
                            Description = "Kate",
                            Rating = "PG-13",
                            RuntimeMins = 120,
                            Title = "The Godfather",
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3681)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3682),
                            Description = "Mick",
                            Rating = "PG-99",
                            RuntimeMins = 120,
                            Title = "Forrest Gump",
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3682)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3683),
                            Description = "Kate",
                            Rating = "PG-99",
                            RuntimeMins = 120,
                            Title = "Forrest Gump",
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3683)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3684),
                            Description = "Audrey",
                            Rating = "PG-7",
                            RuntimeMins = 120,
                            Title = "Titanic",
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3685)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3687),
                            Description = "Kate",
                            Rating = "PG-18",
                            RuntimeMins = 120,
                            Title = "Inception",
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3687)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3694),
                            Description = "Kate",
                            Rating = "PG-18",
                            RuntimeMins = 120,
                            Title = "Pulp Fiction",
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3694)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3695),
                            Description = "Oprah",
                            Rating = "PG-18",
                            RuntimeMins = 120,
                            Title = "The Dark Knight",
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3695)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3696),
                            Description = "Oprah",
                            Rating = "PG-18",
                            RuntimeMins = 120,
                            Title = "The Godfather",
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3696)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3698),
                            Description = "Elvis",
                            Rating = "PG-18",
                            RuntimeMins = 120,
                            Title = "Inception",
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3698)
                        });
                });

            modelBuilder.Entity("api_cinema_challange.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("screenNumber")
                        .HasColumnType("integer")
                        .HasColumnName("screen_number");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("screening");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 30,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3709),
                            MovieId = 3,
                            StartsAt = new DateTime(2024, 2, 3, 0, 12, 5, 513, DateTimeKind.Utc).AddTicks(3701),
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3710),
                            screenNumber = 1
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 30,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3712),
                            MovieId = 6,
                            StartsAt = new DateTime(2024, 2, 2, 17, 12, 5, 513, DateTimeKind.Utc).AddTicks(3712),
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3713),
                            screenNumber = 2
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 30,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3714),
                            MovieId = 6,
                            StartsAt = new DateTime(2024, 2, 2, 15, 12, 5, 513, DateTimeKind.Utc).AddTicks(3713),
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3714),
                            screenNumber = 3
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 30,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3715),
                            MovieId = 6,
                            StartsAt = new DateTime(2024, 2, 2, 23, 12, 5, 513, DateTimeKind.Utc).AddTicks(3715),
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3715),
                            screenNumber = 4
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 30,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3716),
                            MovieId = 9,
                            StartsAt = new DateTime(2024, 2, 2, 14, 12, 5, 513, DateTimeKind.Utc).AddTicks(3716),
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3717),
                            screenNumber = 5
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 30,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3719),
                            MovieId = 5,
                            StartsAt = new DateTime(2024, 2, 3, 8, 12, 5, 513, DateTimeKind.Utc).AddTicks(3718),
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3719),
                            screenNumber = 6
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 30,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3720),
                            MovieId = 10,
                            StartsAt = new DateTime(2024, 2, 2, 23, 12, 5, 513, DateTimeKind.Utc).AddTicks(3719),
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3720),
                            screenNumber = 7
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 30,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3721),
                            MovieId = 10,
                            StartsAt = new DateTime(2024, 2, 2, 20, 12, 5, 513, DateTimeKind.Utc).AddTicks(3721),
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3721),
                            screenNumber = 8
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 30,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3722),
                            MovieId = 4,
                            StartsAt = new DateTime(2024, 2, 2, 21, 12, 5, 513, DateTimeKind.Utc).AddTicks(3722),
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3722),
                            screenNumber = 9
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 30,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3724),
                            MovieId = 2,
                            StartsAt = new DateTime(2024, 2, 2, 21, 12, 5, 513, DateTimeKind.Utc).AddTicks(3724),
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3724),
                            screenNumber = 10
                        });
                });

            modelBuilder.Entity("api_cinema_challange.Models.ScreeningTicket", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("integer")
                        .HasColumnName("ticket_id");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("integer")
                        .HasColumnName("screening_id");

                    b.HasKey("TicketId", "ScreeningId");

                    b.HasIndex("ScreeningId");

                    b.ToTable("screening_ticket");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            ScreeningId = 1
                        },
                        new
                        {
                            TicketId = 2,
                            ScreeningId = 2
                        },
                        new
                        {
                            TicketId = 3,
                            ScreeningId = 3
                        },
                        new
                        {
                            TicketId = 4,
                            ScreeningId = 4
                        },
                        new
                        {
                            TicketId = 5,
                            ScreeningId = 5
                        },
                        new
                        {
                            TicketId = 6,
                            ScreeningId = 6
                        },
                        new
                        {
                            TicketId = 7,
                            ScreeningId = 7
                        },
                        new
                        {
                            TicketId = 8,
                            ScreeningId = 8
                        },
                        new
                        {
                            TicketId = 9,
                            ScreeningId = 9
                        },
                        new
                        {
                            TicketId = 10,
                            ScreeningId = 10
                        });
                });

            modelBuilder.Entity("api_cinema_challange.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("NumSeats")
                        .HasColumnType("integer")
                        .HasColumnName("num_seats");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("ticket");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3726),
                            NumSeats = 2,
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3726)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3728),
                            NumSeats = 2,
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3728)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3728),
                            NumSeats = 2,
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3729)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3729),
                            NumSeats = 2,
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3729)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3730),
                            NumSeats = 2,
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3730)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3731),
                            NumSeats = 2,
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3732)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3732),
                            NumSeats = 2,
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3732)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3733),
                            NumSeats = 2,
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3733)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3733),
                            NumSeats = 2,
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3733)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3734),
                            NumSeats = 2,
                            UpdatedAt = new DateTime(2024, 2, 2, 10, 12, 5, 513, DateTimeKind.Utc).AddTicks(3735)
                        });
                });

            modelBuilder.Entity("api_cinema_challange.Models.CustomerTicket", b =>
                {
                    b.HasOne("api_cinema_challange.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_cinema_challange.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("api_cinema_challange.Models.Screening", b =>
                {
                    b.HasOne("api_cinema_challange.Models.Movie", "Movie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("api_cinema_challange.Models.ScreeningTicket", b =>
                {
                    b.HasOne("api_cinema_challange.Models.Screening", "Screening")
                        .WithMany()
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_cinema_challange.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screening");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("api_cinema_challange.Models.Movie", b =>
                {
                    b.Navigation("Screenings");
                });
#pragma warning restore 612, 618
        }
    }
}
