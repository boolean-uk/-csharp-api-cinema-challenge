// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    [Migration("20240202122927_NewFieldToPrimaryKeyTicket")]
    partial class NewFieldToPrimaryKeyTicket
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8012),
                            Email = "DonaldDuck@gmail.com",
                            Name = "Donald Duck",
                            Phone = "(496) 262-1642",
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8042)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8053),
                            Email = "ElvisPresley@gmail.com",
                            Name = "Elvis Presley",
                            Phone = "(200) 933-1067",
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8058)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8063),
                            Email = "Barack.Obama@gmail.com",
                            Name = "Barack Obama",
                            Phone = "(853) 847-7386",
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8068)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8082),
                            Email = "OprahWinfrey@gmail.com",
                            Name = "Oprah Winfrey",
                            Phone = "(609) 360-3328",
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8087)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rating");

                    b.Property<int>("RuntimeMins")
                        .HasColumnType("integer")
                        .HasColumnName("runtime_mins");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(7825),
                            Description = "It was ok, critics are indifferent.",
                            Rating = "G",
                            RuntimeMins = 140,
                            Title = "Amelie",
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(7944)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(7966),
                            Description = "Suitable for all ages.",
                            Rating = "R",
                            RuntimeMins = 53,
                            Title = "One Flew Over The Cuckoo's Nest",
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(7972)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(7979),
                            Description = "This is a cult classic.",
                            Rating = "G",
                            RuntimeMins = 58,
                            Title = "Alien - Prometheus",
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(7985)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(7992),
                            Description = "The greatest movie ever made.",
                            Rating = "PG",
                            RuntimeMins = 61,
                            Title = "Fantastic Mr. Fox",
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(7997)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("integer")
                        .HasColumnName("screen_number");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("screenings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 51,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8104),
                            MovieId = 4,
                            ScreenNumber = 19,
                            StartsAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8096),
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8123)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 46,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8147),
                            MovieId = 2,
                            ScreenNumber = 25,
                            StartsAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8141),
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8152)
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 40,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8164),
                            MovieId = 2,
                            ScreenNumber = 35,
                            StartsAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8159),
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8168)
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 39,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8178),
                            MovieId = 2,
                            ScreenNumber = 7,
                            StartsAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8174),
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8183)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("integer")
                        .HasColumnName("screening_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("NumSeats")
                        .HasColumnType("integer")
                        .HasColumnName("num_seats");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id", "ScreeningId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ScreeningId");

                    b.ToTable("tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ScreeningId = 2,
                            CustomerId = 2,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8191),
                            NumSeats = 1,
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8229)
                        },
                        new
                        {
                            Id = 2,
                            ScreeningId = 3,
                            CustomerId = 3,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8249),
                            NumSeats = 3,
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8253)
                        },
                        new
                        {
                            Id = 3,
                            ScreeningId = 4,
                            CustomerId = 4,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8259),
                            NumSeats = 4,
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 29, 26, 505, DateTimeKind.Utc).AddTicks(8263)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Movie", "Movie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Ticket", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Customer", "Customer")
                        .WithMany("Tickets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_cinema_challenge.Models.Screening", "Screening")
                        .WithMany("Tickets")
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Screening");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Navigation("Screenings");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
