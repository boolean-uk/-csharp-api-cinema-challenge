// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    partial class CinemaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("TimeUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.HasKey("Id");

                    b.ToTable("customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Charles Windsor@bbc.co.uk",
                            Name = "Charles Windsor",
                            Phone = "94672250",
                            TimeCreated = new DateTime(2024, 2, 12, 14, 12, 9, 618, DateTimeKind.Utc).AddTicks(8926),
                            TimeUpdated = new DateTime(2024, 2, 12, 14, 12, 9, 618, DateTimeKind.Utc).AddTicks(8926)
                        },
                        new
                        {
                            Id = 2,
                            Email = "Jimi Windsor@bbc.co.uk",
                            Name = "Jimi Windsor",
                            Phone = "91606802",
                            TimeCreated = new DateTime(2024, 2, 12, 14, 12, 9, 618, DateTimeKind.Utc).AddTicks(8957),
                            TimeUpdated = new DateTime(2024, 2, 12, 14, 12, 9, 618, DateTimeKind.Utc).AddTicks(8957)
                        },
                        new
                        {
                            Id = 3,
                            Email = "Barack Winfrey@google.com",
                            Name = "Barack Winfrey",
                            Phone = "48288920",
                            TimeCreated = new DateTime(2024, 2, 12, 14, 12, 9, 618, DateTimeKind.Utc).AddTicks(8959),
                            TimeUpdated = new DateTime(2024, 2, 12, 14, 12, 9, 618, DateTimeKind.Utc).AddTicks(8959)
                        },
                        new
                        {
                            Id = 4,
                            Email = "Elvis Hepburn@google.com",
                            Name = "Elvis Hepburn",
                            Phone = "76939017",
                            TimeCreated = new DateTime(2024, 2, 12, 14, 12, 9, 618, DateTimeKind.Utc).AddTicks(8961),
                            TimeUpdated = new DateTime(2024, 2, 12, 14, 12, 9, 618, DateTimeKind.Utc).AddTicks(8961)
                        },
                        new
                        {
                            Id = 5,
                            Email = "Donald Winfrey@something.com",
                            Name = "Donald Winfrey",
                            Phone = "77279980",
                            TimeCreated = new DateTime(2024, 2, 12, 14, 12, 9, 618, DateTimeKind.Utc).AddTicks(8962),
                            TimeUpdated = new DateTime(2024, 2, 12, 14, 12, 9, 618, DateTimeKind.Utc).AddTicks(8962)
                        },
                        new
                        {
                            Id = 6,
                            Email = "Elvis Windsor@theworld.ca",
                            Name = "Elvis Windsor",
                            Phone = "54705178",
                            TimeCreated = new DateTime(2024, 2, 12, 14, 12, 9, 618, DateTimeKind.Utc).AddTicks(8964),
                            TimeUpdated = new DateTime(2024, 2, 12, 14, 12, 9, 618, DateTimeKind.Utc).AddTicks(8964)
                        },
                        new
                        {
                            Id = 7,
                            Email = "Elvis Winslet@nasa.org.us",
                            Name = "Elvis Winslet",
                            Phone = "63754366",
                            TimeCreated = new DateTime(2024, 2, 12, 14, 12, 9, 618, DateTimeKind.Utc).AddTicks(8966),
                            TimeUpdated = new DateTime(2024, 2, 12, 14, 12, 9, 618, DateTimeKind.Utc).AddTicks(8966)
                        },
                        new
                        {
                            Id = 8,
                            Email = "Elvis Presley@bbc.co.uk",
                            Name = "Elvis Presley",
                            Phone = "22226343",
                            TimeCreated = new DateTime(2024, 2, 12, 14, 12, 9, 618, DateTimeKind.Utc).AddTicks(8967),
                            TimeUpdated = new DateTime(2024, 2, 12, 14, 12, 9, 618, DateTimeKind.Utc).AddTicks(8967)
                        },
                        new
                        {
                            Id = 9,
                            Email = "Donald Hendrix@nasa.org.us",
                            Name = "Donald Hendrix",
                            Phone = "20710201",
                            TimeCreated = new DateTime(2024, 2, 12, 14, 12, 9, 618, DateTimeKind.Utc).AddTicks(8969),
                            TimeUpdated = new DateTime(2024, 2, 12, 14, 12, 9, 618, DateTimeKind.Utc).AddTicks(8969)
                        },
                        new
                        {
                            Id = 10,
                            Email = "Elvis Winfrey@tesla.com",
                            Name = "Elvis Winfrey",
                            Phone = "39737877",
                            TimeCreated = new DateTime(2024, 2, 12, 14, 12, 9, 618, DateTimeKind.Utc).AddTicks(8970),
                            TimeUpdated = new DateTime(2024, 2, 12, 14, 12, 9, 618, DateTimeKind.Utc).AddTicks(8970)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rating");

                    b.Property<int>("RuntimeMins")
                        .HasColumnType("integer")
                        .HasColumnName("runtime_mins");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_created");

                    b.Property<DateTime>("TimeUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_updated");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("Movie");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A movie about Microscopic",
                            Rating = "4/10",
                            RuntimeMins = 113,
                            TimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "A bunch of Flowers"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A movie about Orange",
                            Rating = "2/10",
                            RuntimeMins = 438,
                            TimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Fifteen Buildings"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A movie about Orange",
                            Rating = "1/10",
                            RuntimeMins = 277,
                            TimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Fifteen Cars"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A movie about Microscopic",
                            Rating = "3/10",
                            RuntimeMins = 316,
                            TimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "An army of Flowers"
                        },
                        new
                        {
                            Id = 5,
                            Description = "A movie about Orange",
                            Rating = "2/10",
                            RuntimeMins = 364,
                            TimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Several Houses"
                        },
                        new
                        {
                            Id = 6,
                            Description = "A movie about Rose Smelling",
                            Rating = "1/10",
                            RuntimeMins = 318,
                            TimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Leopards"
                        },
                        new
                        {
                            Id = 7,
                            Description = "A movie about Orange",
                            Rating = "1/10",
                            RuntimeMins = 236,
                            TimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Several Planets"
                        },
                        new
                        {
                            Id = 8,
                            Description = "A movie about Orange",
                            Rating = "3/10",
                            RuntimeMins = 259,
                            TimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "A bunch of Houses"
                        },
                        new
                        {
                            Id = 9,
                            Description = "A movie about Bitter",
                            Rating = "9/10",
                            RuntimeMins = 337,
                            TimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Several Houses"
                        },
                        new
                        {
                            Id = 10,
                            Description = "A movie about Microscopic",
                            Rating = "0/10",
                            RuntimeMins = 84,
                            TimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Cars"
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<int>("ScreenNum")
                        .HasColumnType("integer")
                        .HasColumnName("screen_num");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("TimeUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("screening");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<int>("NumSeats")
                        .HasColumnType("integer")
                        .HasColumnName("num_seats");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("integer")
                        .HasColumnName("screening_id");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ScreeningId");

                    b.ToTable("ticket");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Movie", "PlayingMovie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayingMovie");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Ticket", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Customer", "Customer")
                        .WithMany("Tickets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_cinema_challenge.Models.Screening", "Screening")
                        .WithMany()
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Screening");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Navigation("Screenings");
                });
#pragma warning restore 612, 618
        }
    }
}
