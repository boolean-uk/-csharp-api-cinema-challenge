// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    partial class CinemaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api_cinema_challenge.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5728),
                            Email = "DonaldDuck@gmail.com",
                            Name = "Donald Duck",
                            Phone = "(496) 262-1642",
                            UpdatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5731),
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5737),
                            Email = "ElvisPresley@gmail.com",
                            Name = "Elvis Presley",
                            Phone = "(200) 933-1067",
                            UpdatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5740),
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5788),
                            Email = "Barack.Obama@gmail.com",
                            Name = "Barack Obama",
                            Phone = "(853) 847-7386",
                            UpdatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5791),
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5796),
                            Email = "OprahWinfrey@gmail.com",
                            Name = "Oprah Winfrey",
                            Phone = "(609) 360-3328",
                            UpdatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5799),
                            UserId = "4"
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rating");

                    b.Property<int>("RuntimeMins")
                        .HasColumnType("integer")
                        .HasColumnName("runtime_mins");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5580),
                            Description = "It was ok, critics are indifferent.",
                            Rating = "R",
                            RuntimeMins = 86,
                            Title = "Amelie",
                            UpdatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5660)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5666),
                            Description = "Suitable for all ages.",
                            Rating = "PG-13",
                            RuntimeMins = 145,
                            Title = "One Flew Over The Cuckoo's Nest",
                            UpdatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5669)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5673),
                            Description = "This is a cult classic.",
                            Rating = "G",
                            RuntimeMins = 37,
                            Title = "Alien - Prometheus",
                            UpdatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5676)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5680),
                            Description = "This is a cult classic.",
                            Rating = "PG",
                            RuntimeMins = 108,
                            Title = "Fantastic Mr. Fox",
                            UpdatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5682)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("integer")
                        .HasColumnName("screen_number");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("screenings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 39,
                            CreatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5808),
                            MovieId = 3,
                            ScreenNumber = 29,
                            StartsAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5805),
                            UpdatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5811)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 36,
                            CreatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5819),
                            MovieId = 3,
                            ScreenNumber = 36,
                            StartsAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5816),
                            UpdatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5822)
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 46,
                            CreatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5829),
                            MovieId = 4,
                            ScreenNumber = 40,
                            StartsAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5826),
                            UpdatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5831)
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 57,
                            CreatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5838),
                            MovieId = 3,
                            ScreenNumber = 16,
                            StartsAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5835),
                            UpdatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5841)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("integer")
                        .HasColumnName("screening_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("NumSeats")
                        .HasColumnType("integer")
                        .HasColumnName("num_seats");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id", "ScreeningId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ScreeningId");

                    b.ToTable("tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ScreeningId = 2,
                            CustomerId = 2,
                            CreatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5846),
                            NumSeats = 3,
                            UpdatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5849)
                        },
                        new
                        {
                            Id = 2,
                            ScreeningId = 3,
                            CustomerId = 3,
                            CreatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5854),
                            NumSeats = 1,
                            UpdatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5857)
                        },
                        new
                        {
                            Id = 3,
                            ScreeningId = 4,
                            CustomerId = 4,
                            CreatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5860),
                            NumSeats = 1,
                            UpdatedAt = new DateTime(2024, 2, 13, 11, 41, 19, 522, DateTimeKind.Utc).AddTicks(5863)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Movie", "Movie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Ticket", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Customer", "Customer")
                        .WithMany("Tickets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_cinema_challenge.Models.Screening", "Screening")
                        .WithMany("Tickets")
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Screening");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Navigation("Screenings");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
