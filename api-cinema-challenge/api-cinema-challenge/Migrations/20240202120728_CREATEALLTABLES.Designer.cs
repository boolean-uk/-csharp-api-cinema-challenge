// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    [Migration("20240202120728_CREATEALLTABLES")]
    partial class CREATEALLTABLES
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rating");

                    b.Property<int>("RuntimeMins")
                        .HasColumnType("integer")
                        .HasColumnName("runtime_mins");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5705),
                            Description = "A short comedy movie",
                            Rating = "Good",
                            RuntimeMins = 77,
                            Title = "The Sweet Potato",
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5705)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 28, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5707),
                            Description = "A thrilling mystery movie",
                            Rating = "Excellent",
                            RuntimeMins = 120,
                            Title = "Mystery Mansion",
                            UpdatedAt = new DateTime(2024, 1, 30, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5708)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 23, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5709),
                            Description = "A beautiful romantic movie",
                            Rating = "Great",
                            RuntimeMins = 90,
                            Title = "Romantic Sunset",
                            UpdatedAt = new DateTime(2024, 1, 25, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5710)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 18, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5711),
                            Description = "An epic science fiction movie",
                            Rating = "Excellent",
                            RuntimeMins = 150,
                            Title = "Sci-Fi Odyssey",
                            UpdatedAt = new DateTime(2024, 1, 21, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5712)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 13, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5713),
                            Description = "A gripping drama movie",
                            Rating = "Good",
                            RuntimeMins = 110,
                            Title = "Drama Junction",
                            UpdatedAt = new DateTime(2024, 1, 15, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5714)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("integer")
                        .HasColumnName("screen_number");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("screenings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 100,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5830),
                            MovieId = 1,
                            ScreenNumber = 1,
                            StartTime = new DateTime(2024, 2, 2, 13, 7, 27, 644, DateTimeKind.Utc).AddTicks(5829),
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5830)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 120,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5833),
                            MovieId = 1,
                            ScreenNumber = 2,
                            StartTime = new DateTime(2024, 2, 2, 15, 7, 27, 644, DateTimeKind.Utc).AddTicks(5832),
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5833)
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 70,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5835),
                            MovieId = 2,
                            ScreenNumber = 3,
                            StartTime = new DateTime(2024, 2, 2, 16, 7, 27, 644, DateTimeKind.Utc).AddTicks(5835),
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5835)
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 80,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5837),
                            MovieId = 2,
                            ScreenNumber = 4,
                            StartTime = new DateTime(2024, 2, 2, 13, 7, 27, 644, DateTimeKind.Utc).AddTicks(5837),
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5838)
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 83,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5839),
                            MovieId = 3,
                            ScreenNumber = 5,
                            StartTime = new DateTime(2024, 2, 2, 17, 7, 27, 644, DateTimeKind.Utc).AddTicks(5839),
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5840)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 2, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5291),
                            Email = "joel@email.com",
                            Name = "Joel Joelsson",
                            PhoneNumber = "0700050088",
                            UpdatedAt = new DateTime(2024, 2, 2, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5295)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 31, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5297),
                            Email = "alice@email.com",
                            Name = "Alice Johnson",
                            PhoneNumber = "0701122334",
                            UpdatedAt = new DateTime(2024, 1, 31, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5305)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 28, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5306),
                            Email = "bob@email.com",
                            Name = "Bob Smith",
                            PhoneNumber = "0709876543",
                            UpdatedAt = new DateTime(2024, 1, 30, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5307)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 25, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5309),
                            Email = "emma@email.com",
                            Name = "Emma White",
                            PhoneNumber = "0703344556",
                            UpdatedAt = new DateTime(2024, 1, 27, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5309)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 23, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5311),
                            Email = "david@email.com",
                            Name = "David Brown",
                            PhoneNumber = "0706677889",
                            UpdatedAt = new DateTime(2024, 1, 26, 12, 7, 27, 644, DateTimeKind.Utc).AddTicks(5312)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
