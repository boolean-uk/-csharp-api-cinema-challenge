// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    [Migration("20240208102406_SetUp")]
    partial class SetUp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challenge.Models.Types.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 8, 10, 24, 6, 268, DateTimeKind.Utc).AddTicks(3203),
                            Email = "GWD@GWD.com",
                            Name = "GWD",
                            Phone = "+4712345678",
                            UpdatedAt = new DateTime(2024, 2, 8, 10, 24, 6, 268, DateTimeKind.Utc).AddTicks(3205)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 8, 10, 24, 6, 268, DateTimeKind.Utc).AddTicks(3209),
                            Email = "Per@Per.com",
                            Name = "Per",
                            Phone = "+4787654321",
                            UpdatedAt = new DateTime(2024, 2, 8, 10, 24, 6, 268, DateTimeKind.Utc).AddTicks(3210)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 8, 10, 24, 6, 268, DateTimeKind.Utc).AddTicks(3212),
                            Email = "Carl@Carl.com",
                            Name = "Carl",
                            Phone = "+4712344321",
                            UpdatedAt = new DateTime(2024, 2, 8, 10, 24, 6, 268, DateTimeKind.Utc).AddTicks(3212)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Types.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rating");

                    b.Property<int>("RuntimeMins")
                        .HasColumnType("integer")
                        .HasColumnName("runtime_mins");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("movie");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 8, 10, 24, 6, 268, DateTimeKind.Utc).AddTicks(3249),
                            Description = "Post war Japan is at its lowest point when a new crisis emerges in the form of a giant monster, baptized in the horrific power of the atomic bomb.",
                            Rating = "PG-13",
                            RuntimeMins = 124,
                            Title = "Godzilla minus one",
                            UpdatedAt = new DateTime(2024, 2, 8, 10, 24, 6, 268, DateTimeKind.Utc).AddTicks(3249)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 8, 10, 24, 6, 268, DateTimeKind.Utc).AddTicks(3253),
                            Description = "A high-octane action thriller which outlines the emotional journey of a man who is set to rectify the wrongs in the society.",
                            Rating = "PG-15",
                            RuntimeMins = 169,
                            Title = "Jawan",
                            UpdatedAt = new DateTime(2024, 2, 8, 10, 24, 6, 268, DateTimeKind.Utc).AddTicks(3253)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Types.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("integer")
                        .HasColumnName("screenNumber");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("screening");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 40,
                            CreatedAt = new DateTime(2024, 2, 8, 10, 24, 6, 268, DateTimeKind.Utc).AddTicks(3309),
                            MovieId = 2,
                            ScreenNumber = 5,
                            StartsAt = new DateTime(2024, 2, 14, 18, 30, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 2, 8, 10, 24, 6, 268, DateTimeKind.Utc).AddTicks(3310)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 80,
                            CreatedAt = new DateTime(2024, 2, 8, 10, 24, 6, 268, DateTimeKind.Utc).AddTicks(3313),
                            MovieId = 1,
                            ScreenNumber = 1,
                            StartsAt = new DateTime(2024, 2, 14, 18, 30, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 2, 8, 10, 24, 6, 268, DateTimeKind.Utc).AddTicks(3314)
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 40,
                            CreatedAt = new DateTime(2024, 2, 8, 10, 24, 6, 268, DateTimeKind.Utc).AddTicks(3316),
                            MovieId = 1,
                            ScreenNumber = 5,
                            StartsAt = new DateTime(2024, 2, 14, 21, 30, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 2, 8, 10, 24, 6, 268, DateTimeKind.Utc).AddTicks(3317)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Types.Screening", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Types.Movie", "Movie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Types.Movie", b =>
                {
                    b.Navigation("Screenings");
                });
#pragma warning restore 612, 618
        }
    }
}
