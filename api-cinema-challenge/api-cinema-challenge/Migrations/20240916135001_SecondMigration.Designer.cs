// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    [Migration("20240916135001_SecondMigration")]
    partial class SecondMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.ToTable("customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 16, 13, 50, 1, 624, DateTimeKind.Utc).AddTicks(711),
                            Email = "bjorg@bjorg.no",
                            Name = "Bjorg",
                            Phone = "45215121",
                            UpdatedAt = new DateTime(2024, 9, 16, 13, 50, 1, 624, DateTimeKind.Utc).AddTicks(713)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 16, 13, 50, 1, 624, DateTimeKind.Utc).AddTicks(714),
                            Email = "ali@ali.org",
                            Name = "Ali",
                            Phone = "77887788",
                            UpdatedAt = new DateTime(2024, 9, 16, 13, 50, 1, 624, DateTimeKind.Utc).AddTicks(715)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 9, 16, 13, 50, 1, 624, DateTimeKind.Utc).AddTicks(716),
                            Email = "kaja@kaja.plazk",
                            Name = "Kaja",
                            Phone = "33343334",
                            UpdatedAt = new DateTime(2024, 9, 16, 13, 50, 1, 624, DateTimeKind.Utc).AddTicks(716)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<int>("RuntimeMins")
                        .HasColumnType("integer")
                        .HasColumnName("runtimeMins");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.ToTable("movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 16, 13, 50, 1, 624, DateTimeKind.Utc).AddTicks(803),
                            Description = "Widely recognized as the worst movie ever made",
                            Rating = 4,
                            RuntimeMins = 87,
                            Title = "Stop or my mom will shoot",
                            UpdatedAt = new DateTime(2024, 9, 16, 13, 50, 1, 624, DateTimeKind.Utc).AddTicks(803)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 16, 13, 50, 1, 624, DateTimeKind.Utc).AddTicks(805),
                            Description = "Romeo and Juliet, but better",
                            Rating = 10,
                            RuntimeMins = 126,
                            Title = "Ronja Rövardotter",
                            UpdatedAt = new DateTime(2024, 9, 16, 13, 50, 1, 624, DateTimeKind.Utc).AddTicks(806)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 9, 16, 13, 50, 1, 624, DateTimeKind.Utc).AddTicks(807),
                            Description = "Bob Hoskins called it his biggest regret",
                            Rating = 4,
                            RuntimeMins = 104,
                            Title = "Super Mario Bros.",
                            UpdatedAt = new DateTime(2024, 9, 16, 13, 50, 1, 624, DateTimeKind.Utc).AddTicks(807)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movieId");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("integer")
                        .HasColumnName("screenNumber");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startsAt");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("screenings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 20,
                            CreatedAt = new DateTime(2024, 9, 16, 13, 50, 1, 624, DateTimeKind.Utc).AddTicks(821),
                            MovieId = 1,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 9, 18, 14, 15, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 16, 13, 50, 1, 624, DateTimeKind.Utc).AddTicks(821)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 15,
                            CreatedAt = new DateTime(2024, 9, 16, 13, 50, 1, 624, DateTimeKind.Utc).AddTicks(823),
                            MovieId = 1,
                            ScreenNumber = 3,
                            StartsAt = new DateTime(2024, 9, 19, 15, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 16, 13, 50, 1, 624, DateTimeKind.Utc).AddTicks(824)
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 300,
                            CreatedAt = new DateTime(2024, 9, 16, 13, 50, 1, 624, DateTimeKind.Utc).AddTicks(825),
                            MovieId = 2,
                            ScreenNumber = 1,
                            StartsAt = new DateTime(2024, 9, 28, 20, 30, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 9, 16, 13, 50, 1, 624, DateTimeKind.Utc).AddTicks(825)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Movie", "ScreeningMovie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScreeningMovie");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Navigation("Screenings");
                });
#pragma warning restore 612, 618
        }
    }
}
