// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    [Migration("20240912093019_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.ToTable("customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3568),
                            Email = "john.doe@example.com",
                            Name = "John Doe",
                            Phone = "555-123-4567",
                            UpdatedAt = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3568)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3570),
                            Email = "jane.smith@example.com",
                            Name = "Jane Smith",
                            Phone = "555-234-5678",
                            UpdatedAt = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3571)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3572),
                            Email = "michael.johnson@example.com",
                            Name = "Michael Johnson",
                            Phone = "555-345-6789",
                            UpdatedAt = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3573)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3574),
                            Email = "emily.davis@example.com",
                            Name = "Emily Davis",
                            Phone = "555-456-7890",
                            UpdatedAt = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3574)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3575),
                            Email = "david.wilson@example.com",
                            Name = "David Wilson",
                            Phone = "555-567-8901",
                            UpdatedAt = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3575)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rating");

                    b.Property<int>("RuntimeMins")
                        .HasColumnType("integer")
                        .HasColumnName("runtimemins");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.ToTable("movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3556),
                            Description = "A skilled thief, Dom Cobb, who can infiltrate and steal information from dreams, is tasked with planting an idea into a target's subconscious. As the mission becomes more dangerous, Cobb confronts his own troubled past.",
                            Rating = "PG-13",
                            RuntimeMins = 148,
                            Title = "Inception",
                            UpdatedAt = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3557)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3560),
                            Description = "Batman faces his greatest challenge yet as the Joker wreaks havoc on Gotham City. As chaos ensues, Bruce Wayne must grapple with the cost of being a hero and the line between good and evil.",
                            Rating = "PG-13",
                            RuntimeMins = 152,
                            Title = "The Dark Knight",
                            UpdatedAt = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3560)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3562),
                            Description = "In a future where Earth is on the brink of collapse, a team of astronauts travels through a wormhole in search of a new home for humanity. The film explores themes of time, space, and love as a survival force.",
                            Rating = "PG-13",
                            RuntimeMins = 169,
                            Title = "Interstellar",
                            UpdatedAt = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3562)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3563),
                            Description = "A hacker, Neo, discovers that reality as he knows it is a simulation controlled by machines. He joins a group of rebels to fight against the machines and free humanity from their virtual prison.",
                            Rating = "R",
                            RuntimeMins = 136,
                            Title = "The Matrix",
                            UpdatedAt = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3564)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAT")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("integer")
                        .HasColumnName("screennumber");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startsAt");

                    b.Property<DateTime>("UpdatedAT")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("screenings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 100,
                            CreatedAT = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3585),
                            MovieId = 1,
                            ScreenNumber = 0,
                            StartsAt = new DateTime(2024, 9, 13, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3580),
                            UpdatedAT = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3594)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 120,
                            CreatedAT = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3597),
                            MovieId = 2,
                            ScreenNumber = 0,
                            StartsAt = new DateTime(2024, 9, 14, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3596),
                            UpdatedAT = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3597)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Ticket", b =>
                {
                    b.Property<int>("ScreeningId")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAT")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("NumSeats")
                        .HasColumnType("integer")
                        .HasColumnName("numseats");

                    b.Property<DateTime>("UpdatedAT")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("ScreeningId", "CustomerID");

                    b.HasIndex("CustomerID");

                    b.ToTable("tickets");

                    b.HasData(
                        new
                        {
                            ScreeningId = 1,
                            CustomerID = 1,
                            CreatedAT = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3599),
                            Id = 1,
                            NumSeats = 1,
                            UpdatedAT = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3600)
                        },
                        new
                        {
                            ScreeningId = 1,
                            CustomerID = 2,
                            CreatedAT = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3602),
                            Id = 2,
                            NumSeats = 1,
                            UpdatedAT = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3602)
                        },
                        new
                        {
                            ScreeningId = 2,
                            CustomerID = 3,
                            CreatedAT = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3603),
                            Id = 3,
                            NumSeats = 1,
                            UpdatedAT = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3604)
                        },
                        new
                        {
                            ScreeningId = 2,
                            CustomerID = 4,
                            CreatedAT = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3605),
                            Id = 4,
                            NumSeats = 1,
                            UpdatedAT = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3605)
                        },
                        new
                        {
                            ScreeningId = 1,
                            CustomerID = 5,
                            CreatedAT = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3606),
                            Id = 5,
                            NumSeats = 1,
                            UpdatedAT = new DateTime(2024, 9, 12, 9, 30, 18, 958, DateTimeKind.Utc).AddTicks(3606)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Ticket", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Customer", "Customer")
                        .WithMany("Tickets")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_cinema_challenge.Models.Screening", "Screening")
                        .WithMany("Tickets")
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Screening");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
