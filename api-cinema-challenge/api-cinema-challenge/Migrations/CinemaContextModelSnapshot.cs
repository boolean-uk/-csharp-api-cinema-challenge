// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    partial class CinemaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 29, 15, 37, 13, 889, DateTimeKind.Utc).AddTicks(8545),
                            Email = "John.Doe@gmail.com",
                            Name = "John Doe",
                            Phone = "12345678",
                            UpdatedAt = new DateTime(2025, 1, 29, 15, 37, 13, 891, DateTimeKind.Utc).AddTicks(5055)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 29, 15, 37, 13, 891, DateTimeKind.Utc).AddTicks(5204),
                            Email = "Jane.Doe@gmail.com",
                            Name = "Jane Doe",
                            Phone = "90123456",
                            UpdatedAt = new DateTime(2025, 1, 29, 15, 37, 13, 891, DateTimeKind.Utc).AddTicks(5208)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RuntimeMins")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Movie");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 29, 15, 37, 13, 891, DateTimeKind.Utc).AddTicks(9182),
                            Description = "A good movie about boats",
                            Rating = "pg-13",
                            RuntimeMins = 120,
                            Title = "Titanic",
                            UpdatedAt = new DateTime(2025, 1, 29, 15, 37, 13, 891, DateTimeKind.Utc).AddTicks(9313)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 29, 15, 37, 13, 891, DateTimeKind.Utc).AddTicks(9381),
                            Description = "A good movie about pills",
                            Rating = "pg-13",
                            RuntimeMins = 132,
                            Title = "The Matrix",
                            UpdatedAt = new DateTime(2025, 1, 29, 15, 37, 13, 891, DateTimeKind.Utc).AddTicks(9383)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Screen");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 90,
                            CreatedAt = new DateTime(2025, 1, 29, 15, 37, 13, 891, DateTimeKind.Utc).AddTicks(9742),
                            ScreenNumber = 1,
                            UpdatedAt = new DateTime(2025, 1, 29, 15, 37, 13, 891, DateTimeKind.Utc).AddTicks(9810)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 90,
                            CreatedAt = new DateTime(2025, 1, 29, 15, 37, 13, 891, DateTimeKind.Utc).AddTicks(9873),
                            ScreenNumber = 2,
                            UpdatedAt = new DateTime(2025, 1, 29, 15, 37, 13, 891, DateTimeKind.Utc).AddTicks(9875)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.ScreenMovie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("ScreenId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("ScreenId");

                    b.ToTable("ScreenMovie");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableSeats = 90,
                            CreatedAt = new DateTime(2025, 1, 29, 15, 37, 13, 892, DateTimeKind.Utc).AddTicks(279),
                            MovieId = 1,
                            ScreenId = 1,
                            StartsAt = new DateTime(2025, 1, 29, 15, 37, 13, 892, DateTimeKind.Utc).AddTicks(218),
                            UpdatedAt = new DateTime(2025, 1, 29, 15, 37, 13, 892, DateTimeKind.Utc).AddTicks(340)
                        },
                        new
                        {
                            Id = 2,
                            AvailableSeats = 90,
                            CreatedAt = new DateTime(2025, 1, 29, 15, 37, 13, 892, DateTimeKind.Utc).AddTicks(411),
                            MovieId = 2,
                            ScreenId = 2,
                            StartsAt = new DateTime(2025, 1, 29, 15, 37, 13, 892, DateTimeKind.Utc).AddTicks(409),
                            UpdatedAt = new DateTime(2025, 1, 29, 15, 37, 13, 892, DateTimeKind.Utc).AddTicks(413)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumSeats")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("ScreenMovieId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("ScreenMovieId");

                    b.ToTable("Ticket");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 29, 15, 37, 13, 892, DateTimeKind.Utc).AddTicks(687),
                            NumSeats = 0,
                            PersonId = 1,
                            ScreenMovieId = 1,
                            UpdatedAt = new DateTime(2025, 1, 29, 15, 37, 13, 892, DateTimeKind.Utc).AddTicks(754)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 29, 15, 37, 13, 892, DateTimeKind.Utc).AddTicks(818),
                            NumSeats = 0,
                            PersonId = 2,
                            ScreenMovieId = 2,
                            UpdatedAt = new DateTime(2025, 1, 29, 15, 37, 13, 892, DateTimeKind.Utc).AddTicks(820)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.ScreenMovie", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Movie", "Movie")
                        .WithMany("ScreenMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_cinema_challenge.Models.Screen", "Screen")
                        .WithMany("ScreenMovies")
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Screen");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Ticket", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Customer", "Customer")
                        .WithMany("Tickets")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_cinema_challenge.Models.ScreenMovie", "ScreenMovie")
                        .WithMany("Tickets")
                        .HasForeignKey("ScreenMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("ScreenMovie");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Navigation("ScreenMovies");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screen", b =>
                {
                    b.Navigation("ScreenMovies");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.ScreenMovie", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
