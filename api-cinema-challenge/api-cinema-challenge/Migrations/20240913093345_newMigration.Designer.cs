// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    [Migration("20240913093345_newMigration")]
    partial class newMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.ToTable("customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 13, 9, 33, 45, 233, DateTimeKind.Utc).AddTicks(1502),
                            Email = "roger@rogan.com",
                            Name = "Roger Rogan",
                            Phone = "+44729389128",
                            UpdatedAt = new DateTime(2024, 9, 13, 9, 33, 45, 233, DateTimeKind.Utc).AddTicks(1503)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 13, 9, 33, 45, 233, DateTimeKind.Utc).AddTicks(1505),
                            Email = "chris@muse.mu",
                            Name = "Chris Wolstenholme",
                            Phone = "+44729388192",
                            UpdatedAt = new DateTime(2024, 9, 13, 9, 33, 45, 233, DateTimeKind.Utc).AddTicks(1506)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 9, 13, 9, 33, 45, 233, DateTimeKind.Utc).AddTicks(1508),
                            Email = "lisa@timber.com",
                            Name = "Lisa Timber",
                            Phone = "+47123456789",
                            UpdatedAt = new DateTime(2024, 9, 13, 9, 33, 45, 233, DateTimeKind.Utc).AddTicks(1509)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rating");

                    b.Property<int>("RuntimeMins")
                        .HasColumnType("integer")
                        .HasColumnName("runtimeMinutes");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.ToTable("movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 13, 9, 33, 45, 233, DateTimeKind.Utc).AddTicks(1556),
                            Description = "The greatest movie ever made.",
                            Rating = "PG-13",
                            RuntimeMins = 126,
                            Title = "Dodgeball",
                            UpdatedAt = new DateTime(2024, 9, 13, 9, 33, 45, 233, DateTimeKind.Utc).AddTicks(1557)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 13, 9, 33, 45, 233, DateTimeKind.Utc).AddTicks(1559),
                            Description = "The story of a lifetime.",
                            Rating = "PG-13",
                            RuntimeMins = 142,
                            Title = "Forrest Gump",
                            UpdatedAt = new DateTime(2024, 9, 13, 9, 33, 45, 233, DateTimeKind.Utc).AddTicks(1560)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movieid");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("integer")
                        .HasColumnName("screenNumber");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.ToTable("screenings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 40,
                            CreatedAt = new DateTime(2024, 9, 13, 9, 33, 45, 233, DateTimeKind.Utc).AddTicks(1599),
                            MovieId = 1,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 9, 15, 9, 33, 45, 233, DateTimeKind.Utc).AddTicks(1589),
                            UpdatedAt = new DateTime(2024, 9, 13, 9, 33, 45, 233, DateTimeKind.Utc).AddTicks(1600)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 80,
                            CreatedAt = new DateTime(2024, 9, 13, 9, 33, 45, 233, DateTimeKind.Utc).AddTicks(1604),
                            MovieId = 2,
                            ScreenNumber = 4,
                            StartsAt = new DateTime(2024, 9, 14, 9, 33, 45, 233, DateTimeKind.Utc).AddTicks(1602),
                            UpdatedAt = new DateTime(2024, 9, 13, 9, 33, 45, 233, DateTimeKind.Utc).AddTicks(1604)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customerid");

                    b.Property<int>("NumSeats")
                        .HasColumnType("integer")
                        .HasColumnName("numSeats");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("integer")
                        .HasColumnName("screeningid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.ToTable("tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 13, 9, 33, 45, 233, DateTimeKind.Utc).AddTicks(1617),
                            CustomerId = 1,
                            NumSeats = 2,
                            ScreeningId = 1,
                            UpdatedAt = new DateTime(2024, 9, 13, 9, 33, 45, 233, DateTimeKind.Utc).AddTicks(1618)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
