// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    partial class CinemaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6606),
                            Email = "tom.hanks@example.com",
                            Name = "Tom Hanks",
                            Phone = "123-456-7890",
                            UpdatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6608)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6609),
                            Email = "leo.dicaprio@example.com",
                            Name = "Leonardo DiCaprio",
                            Phone = "123-456-7891",
                            UpdatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6610)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6611),
                            Email = "scarlett.johansson@example.com",
                            Name = "Scarlett Johansson",
                            Phone = "123-456-7892",
                            UpdatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6611)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6612),
                            Email = "brad.pitt@example.com",
                            Name = "Brad Pitt",
                            Phone = "123-456-7893",
                            UpdatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6612)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6613),
                            Email = "angelina.jolie@example.com",
                            Name = "Angelina Jolie",
                            Phone = "123-456-7894",
                            UpdatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6614)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RuntimeMins")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6703),
                            Description = "The story of a man with a low IQ who accomplished great things in his life.",
                            Rating = "PG-13",
                            RuntimeMins = 142,
                            Title = "Forrest Gump",
                            UpdatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6704)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6705),
                            Description = "A love story between Jack and Rose aboard the ill-fated Titanic.",
                            Rating = "PG-13",
                            RuntimeMins = 195,
                            Title = "Titanic",
                            UpdatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6705)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6707),
                            Description = "A team of superheroes including Iron Man, Captain America, and Thor, come together to save the world.",
                            Rating = "PG-13",
                            RuntimeMins = 143,
                            Title = "The Avengers",
                            UpdatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6707)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6708),
                            Description = "An insomniac office worker and a devil-may-care soapmaker form an underground fight club that evolves into something much, much more.",
                            Rating = "R",
                            RuntimeMins = 139,
                            Title = "Fight Club",
                            UpdatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6708)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6709),
                            Description = "A bored married couple is surprised to learn that they are both assassins hired by competing agencies to kill each other.",
                            Rating = "PG-13",
                            RuntimeMins = 120,
                            Title = "Mr. & Mrs. Smith",
                            UpdatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6710)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Screenings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 100,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScreenNumber = 1,
                            StartsAt = new DateTime(2024, 2, 13, 11, 21, 53, 200, DateTimeKind.Utc).AddTicks(6724),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 120,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 2, 13, 12, 21, 53, 200, DateTimeKind.Utc).AddTicks(6730),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 80,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScreenNumber = 3,
                            StartsAt = new DateTime(2024, 2, 13, 13, 21, 53, 200, DateTimeKind.Utc).AddTicks(6731),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 90,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScreenNumber = 4,
                            StartsAt = new DateTime(2024, 2, 13, 14, 21, 53, 200, DateTimeKind.Utc).AddTicks(6732),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 110,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScreenNumber = 5,
                            StartsAt = new DateTime(2024, 2, 13, 15, 21, 53, 200, DateTimeKind.Utc).AddTicks(6733),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumSeats")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6747),
                            NumSeats = 10,
                            UpdatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6747)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6748),
                            NumSeats = 20,
                            UpdatedAt = new DateTime(2024, 2, 13, 10, 21, 53, 200, DateTimeKind.Utc).AddTicks(6748)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
