// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    partial class CinemaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challenge.Models.Types.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 9, 10, 42, 26, 137, DateTimeKind.Utc).AddTicks(5335),
                            Email = "GWD@GWD.com",
                            Name = "GWD",
                            Phone = "+4712345678",
                            UpdatedAt = new DateTime(2024, 2, 9, 10, 42, 26, 137, DateTimeKind.Utc).AddTicks(5338)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 9, 10, 42, 26, 137, DateTimeKind.Utc).AddTicks(5350),
                            Email = "Per@Per.com",
                            Name = "Per",
                            Phone = "+4787654321",
                            UpdatedAt = new DateTime(2024, 2, 9, 10, 42, 26, 137, DateTimeKind.Utc).AddTicks(5350)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 9, 10, 42, 26, 137, DateTimeKind.Utc).AddTicks(5353),
                            Email = "Carl@Carl.com",
                            Name = "Carl",
                            Phone = "+4712344321",
                            UpdatedAt = new DateTime(2024, 2, 9, 10, 42, 26, 137, DateTimeKind.Utc).AddTicks(5354)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Types.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rating");

                    b.Property<int>("RuntimeMins")
                        .HasColumnType("integer")
                        .HasColumnName("runtime_mins");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("movie");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 9, 10, 42, 26, 137, DateTimeKind.Utc).AddTicks(5488),
                            Description = "Post war Japan is at its lowest point when a new crisis emerges in the form of a giant monster, baptized in the horrific power of the atomic bomb.",
                            Rating = "PG-13",
                            RuntimeMins = 124,
                            Title = "Godzilla minus one",
                            UpdatedAt = new DateTime(2024, 2, 9, 10, 42, 26, 137, DateTimeKind.Utc).AddTicks(5491)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 9, 10, 42, 26, 137, DateTimeKind.Utc).AddTicks(5497),
                            Description = "A high-octane action thriller which outlines the emotional journey of a man who is set to rectify the wrongs in the society.",
                            Rating = "PG-15",
                            RuntimeMins = 169,
                            Title = "Jawan",
                            UpdatedAt = new DateTime(2024, 2, 9, 10, 42, 26, 137, DateTimeKind.Utc).AddTicks(5498)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Types.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("integer")
                        .HasColumnName("screenNumber");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("screening");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 40,
                            CreatedAt = new DateTime(2024, 2, 9, 10, 42, 26, 137, DateTimeKind.Utc).AddTicks(5557),
                            MovieId = 2,
                            ScreenNumber = 5,
                            StartsAt = new DateTime(2024, 2, 14, 18, 30, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 2, 9, 10, 42, 26, 137, DateTimeKind.Utc).AddTicks(5558)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 80,
                            CreatedAt = new DateTime(2024, 2, 9, 10, 42, 26, 137, DateTimeKind.Utc).AddTicks(5566),
                            MovieId = 1,
                            ScreenNumber = 1,
                            StartsAt = new DateTime(2024, 2, 14, 18, 30, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 2, 9, 10, 42, 26, 137, DateTimeKind.Utc).AddTicks(5566)
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 40,
                            CreatedAt = new DateTime(2024, 2, 9, 10, 42, 26, 137, DateTimeKind.Utc).AddTicks(5668),
                            MovieId = 1,
                            ScreenNumber = 5,
                            StartsAt = new DateTime(2024, 2, 14, 21, 30, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 2, 9, 10, 42, 26, 137, DateTimeKind.Utc).AddTicks(5669)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Types.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<int>("NumSeats")
                        .HasColumnType("integer")
                        .HasColumnName("num_seats");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("integer")
                        .HasColumnName("screening_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ScreeningId");

                    b.ToTable("ticket");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 9, 10, 42, 26, 137, DateTimeKind.Utc).AddTicks(5768),
                            CustomerId = 1,
                            NumSeats = 2,
                            ScreeningId = 2,
                            UpdatedAt = new DateTime(2024, 2, 9, 10, 42, 26, 137, DateTimeKind.Utc).AddTicks(5769)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 9, 10, 42, 26, 137, DateTimeKind.Utc).AddTicks(5778),
                            CustomerId = 2,
                            NumSeats = 38,
                            ScreeningId = 1,
                            UpdatedAt = new DateTime(2024, 2, 9, 10, 42, 26, 137, DateTimeKind.Utc).AddTicks(5779)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Types.Screening", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Types.Movie", "Movie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Types.Ticket", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Types.Customer", "Customer")
                        .WithMany("Tickets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_cinema_challenge.Models.Types.Screening", "Screening")
                        .WithMany("Tickets")
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Screening");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Types.Customer", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Types.Movie", b =>
                {
                    b.Navigation("Screenings");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Types.Screening", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
