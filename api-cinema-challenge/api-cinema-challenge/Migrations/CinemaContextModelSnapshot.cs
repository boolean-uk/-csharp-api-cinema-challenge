// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class CinemaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<int?>("ScreeningId")
                        .HasColumnType("integer")
                        .HasColumnName("screening_id");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ScreeningId");

                    b.ToTable("customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "aliali@live.no",
                            Name = "Ali Haider Khan",
                            Phone = "112",
                            ScreeningId = 1,
                            createdAt = new DateTime(2024, 9, 17, 21, 6, 33, 93, DateTimeKind.Utc).AddTicks(1765),
                            updatedAt = new DateTime(2024, 9, 17, 21, 6, 33, 93, DateTimeKind.Utc).AddTicks(1770)
                        },
                        new
                        {
                            Id = 2,
                            Email = "messi786@live.com",
                            Name = "Lionel Messi",
                            Phone = "1881",
                            ScreeningId = 2,
                            createdAt = new DateTime(2024, 9, 17, 21, 6, 33, 93, DateTimeKind.Utc).AddTicks(1785),
                            updatedAt = new DateTime(2024, 9, 17, 21, 6, 33, 93, DateTimeKind.Utc).AddTicks(1786)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descrpition");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rating");

                    b.Property<int>("RunTimeMins")
                        .HasColumnType("integer")
                        .HasColumnName("runTimeMins");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.ToTable("movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 17, 21, 6, 33, 93, DateTimeKind.Utc).AddTicks(2069),
                            Description = "Typical Bollywood",
                            Rating = "6",
                            RunTimeMins = 184,
                            Title = "Bodyguard",
                            UpdatedAt = new DateTime(2024, 9, 17, 21, 6, 33, 93, DateTimeKind.Utc).AddTicks(2071)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 17, 21, 6, 33, 93, DateTimeKind.Utc).AddTicks(2076),
                            Description = "Love story",
                            Rating = "5",
                            RunTimeMins = 200,
                            Title = "DDLJ",
                            UpdatedAt = new DateTime(2024, 9, 17, 21, 6, 33, 93, DateTimeKind.Utc).AddTicks(2077)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt");

                    b.Property<int?>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("integer")
                        .HasColumnName("screennumber");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startsAt");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("screenings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 50,
                            CreatedAt = new DateTime(2024, 9, 17, 21, 6, 33, 93, DateTimeKind.Utc).AddTicks(2127),
                            MovieId = 1,
                            ScreenNumber = 1,
                            StartsAt = new DateTime(2024, 9, 17, 21, 6, 33, 93, DateTimeKind.Utc).AddTicks(2125),
                            updatedAt = new DateTime(2024, 9, 17, 21, 6, 33, 93, DateTimeKind.Utc).AddTicks(2128)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 100,
                            CreatedAt = new DateTime(2024, 9, 17, 21, 6, 33, 93, DateTimeKind.Utc).AddTicks(2140),
                            MovieId = 2,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 9, 17, 21, 6, 33, 93, DateTimeKind.Utc).AddTicks(2139),
                            updatedAt = new DateTime(2024, 9, 17, 21, 6, 33, 93, DateTimeKind.Utc).AddTicks(2141)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Screening", "screening")
                        .WithMany()
                        .HasForeignKey("ScreeningId");

                    b.Navigation("screening");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Movie", "movie")
                        .WithMany()
                        .HasForeignKey("MovieId");

                    b.Navigation("movie");
                });
#pragma warning restore 612, 618
        }
    }
}
